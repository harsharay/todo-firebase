{"version":3,"sources":["Firebase/firebase.utils.js","Components/TodoList/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","googlSignIn","signInWithRedirect","createUserDocument","userAuth","a","reference","doc","uid","get","exists","displayName","email","createdAt","Date","listItems","set","e","console","log","message","TodoList","useState","data","setData","list","setList","userData","setUserData","empty","setEmpty","useEffect","onAuthStateChanged","user","addToFirestoreAndGet","update","FieldValue","arrayUnion","collection","where","forEach","item","handleRetrieve","length","handleDelete","task","arrayRemove","className","onClick","signOut","Alert","severity","type","placeholder","onChange","newValue","target","value","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0UAeAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAKJ,IAAMC,EAAYT,IAASS,YACrBC,EAAOV,IAASU,OAEvBC,EAAW,IAAIX,IAASU,KAAKE,mBAEnCD,EAASE,oBAAoB,CAAEC,OAAS,mBAEjC,IAAMC,EAAc,kBAAML,EAAKM,mBAAmBL,IAI5CM,EAAkB,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,0DAC3BD,EAD2B,wBAEtBE,EAAYX,EAAUY,IAAV,mBAA0BH,EAASI,MAFzB,SAGLF,EAAUG,MAHL,iBAIbC,OAJa,iBAKhBC,EAA4BP,EAA5BO,YAAaH,EAAeJ,EAAfI,IAAKI,EAAUR,EAAVQ,MACpBC,EAAY,IAAIC,KAChBC,EAAY,GAChB,IACIT,EAAUU,IAAI,CACVL,cACAH,MACAI,QACAC,YACAE,cAEN,MAAOE,GACLC,QAAQC,IAAR,UAAeF,EAAEG,QAAjB,kBAjBkB,iDAoBfhB,GApBe,4CAAH,sD,wDC6FhBiB,MAhHf,WAAqB,IAAD,EAEQC,mBAAS,IAFjB,mBAETC,EAFS,KAEHC,EAFG,OAGQF,mBAAS,IAHjB,mBAGTG,EAHS,KAGHC,EAHG,OAIgBJ,mBAAS,IAJzB,mBAITK,EAJS,KAICC,EAJD,OAKUN,mBAAS,MALnB,mBAKTO,EALS,KAKFC,EALE,KAWhBC,qBAAU,WACNnC,EAAKoC,oBAAmB,SAAAC,GACpBL,EAAYK,GACZ9B,EAAmB8B,QAEzB,IAGF,IAeMC,EAAoB,uCAAG,WAAOP,GAAP,SAAAtB,EAAA,0DACtBsB,EADsB,gCAGfhC,EAAUY,IAAV,oBAA2BoB,EAASnB,MAAO2B,OAAO,CACpDpB,UAAa7B,YAAmBkD,WAAWC,WAAWd,KAJrC,cAMrBO,EAAS,MANY,SAQAnC,EAAU2C,WAAW,YAAYC,MAAM,MAAM,KAAKZ,EAASnB,KAAKC,MARhE,cASZ+B,SAAQ,SAAAC,GAAI,OAAIf,EAAQe,EAAKlB,OAAOR,cATxB,2CAAH,sDAuBpB2B,EAAc,uCAAG,sBAAArC,EAAA,0DAChBsB,EADgB,gCAEOhC,EAAU2C,WAAW,YAAYC,MAAM,MAAM,KAAKZ,EAASnB,KAAKC,MAFvE,cAGL+B,SAAQ,SAAAC,GACXA,EAAKlB,OAAOR,UAAU4B,OAAS,EAC9BjB,EAAQe,EAAKlB,OAAOR,WAGpBe,EAAS,YARF,2CAAH,qDAedc,EAAY,uCAAG,WAAOC,GAAP,SAAAxC,EAAA,0DACdsB,EADc,gCAEPhC,EAAUY,IAAV,mBAA0BoB,EAASnB,MAAO2B,OAAO,CACnDpB,UAAY7B,YAAmBkD,WAAWU,YAAYD,KAH7C,uBAKQlD,EAAU2C,WAAW,YAAYC,MAAM,MAAM,KAAKZ,EAASnB,KAAKC,MALxE,cAMJ+B,SAAQ,SAAAC,GAAI,OAAIf,EAAQe,EAAKlB,OAAOR,cANhC,2CAAH,sDAYlB,OACI,yBAAKgC,UAAU,aACVpB,EACD,yBAAKoB,UAAU,kBACX,yBAAKA,UAAU,gBACX,4BAAQC,QAAS,kBAAMpD,EAAKqD,WAAWF,UAAU,YAAjD,YACe,IAAdtB,EAAKkB,QAAc,4BAAQK,QAASN,EAAgBK,UAAU,YAA3C,sBAEvBlB,GAAS,kBAACqB,EAAA,EAAD,CAAOC,SAAS,WAAhB,4CACV,uCAAY,0BAAMJ,UAAU,aAAapB,EAAShB,cAClD,2BAAOyC,KAAK,OAAOC,YAAY,yBAAyBC,SA3E/C,SAACrC,GAClB,IAAIsC,EAAWtC,EAAEuC,OAAOC,MACxBjC,EAAQ+B,IAyEgFE,MAAOlC,EAAMwB,UAAU,cACvG,kBAAC,IAAD,CAAgBC,QAvER,WACC,IAAdzB,EAAKoB,QAEJT,EAAqBP,GAGzBH,EAAQ,KAiEsCuB,UAAU,QAChD,yBAAKA,UAAU,cACVtB,EAAKkB,OAAO,EACTlB,EAAKiC,KAAI,SAACjB,EAAKkB,GAAN,OAAgB,wBAAIC,IAAKD,GAAQlB,EAAK,0BAAMM,UAAU,SAASC,QAAS,kBAAMJ,EAAaH,KAAO,kBAAC,IAAD,WAG/G,+CAGJ,6BACA,mDACA,4BAAQO,QAAS/C,EAAa8C,UAAU,WAAxC,oB,MCrGDc,MATf,WACE,OACE,yBAAKd,UAAU,OACb,wBAAIA,UAAU,UAAd,mBACA,kBAAC,EAAD,QCGce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAM3D,c","file":"static/js/main.84810121.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAAvuA7BTJRVFRym3cRHHzwfPIM3NaCTP0\",\r\n    authDomain: \"crwn-db-b2bb7.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-b2bb7.firebaseio.com\",\r\n    projectId: \"crwn-db-b2bb7\",\r\n    storageBucket: \"crwn-db-b2bb7.appspot.com\",\r\n    messagingSenderId: \"281711477222\",\r\n    appId: \"1:281711477222:web:7f1a80f4d9c5158ff89627\"\r\n  };\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firestore = firebase.firestore()\r\nexport const auth = firebase.auth()\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\n\r\nprovider.setCustomParameters({ prompt : 'select_account' })\r\n\r\nexport const googlSignIn = () => auth.signInWithRedirect(provider)\r\n\r\n//Creating user document\r\n\r\nexport const createUserDocument = async (userAuth) => {\r\n    if(userAuth){\r\n        let reference = firestore.doc(`todoList/${userAuth.uid}`)\r\n        let snapshot = await reference.get()\r\n        if(!snapshot.exists){\r\n            let { displayName, uid, email } = userAuth\r\n            let createdAt = new Date()\r\n            let listItems = []\r\n            try {\r\n                reference.set({\r\n                    displayName,\r\n                    uid,\r\n                    email,\r\n                    createdAt,\r\n                    listItems\r\n                })\r\n            } catch (e) {\r\n                console.log(`${e.message} is the error`)\r\n            }\r\n        } else {\r\n            return userAuth;\r\n            // console.log(userAuth)\r\n        }\r\n    }\r\n}\r\n\r\n","import React,{ useState,useEffect } from 'react'\r\nimport { firestore, googlSignIn, createUserDocument, auth } from \"../../Firebase/firebase.utils\"\r\nimport * as firebase from \"firebase\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport AddCommentIcon from '@material-ui/icons/AddComment';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport \"./TodoList.styles.css\"\r\n\r\nfunction TodoList() {\r\n\r\n    const [data, setData] = useState(\"\") //Single task\r\n    const [list, setList] = useState([]) //Todo List main\r\n    const [userData ,setUserData] = useState([]) //User Data from firebase\r\n    const [empty, setEmpty] = useState(null)\r\n\r\n    // useEffect(() => {\r\n    //     addToFirestore()\r\n    // },[list])\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(user => {\r\n            setUserData(user)\r\n            createUserDocument(user)\r\n        })\r\n    },[])\r\n\r\n\r\n    const handleChange = (e) => {\r\n        let newValue = e.target.value\r\n        setData(newValue)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if(data.length!==0){\r\n            // setList([...list,data])\r\n            addToFirestoreAndGet(userData)\r\n            // getItemsFromFirestore(userData)\r\n        } \r\n        setData(\"\")\r\n    }\r\n\r\n    //Adding individual task to firestore data\r\n    const addToFirestoreAndGet = async (userData) => {\r\n        if(userData){\r\n            //Updating the individual task into the firebase array\r\n            await firestore.doc(`/todoList/${userData.uid}`).update({ \r\n                listItems :  firebase.firestore.FieldValue.arrayUnion(data)\r\n            })\r\n            setEmpty(null)\r\n            //Getting the data from firebase\r\n            let response = await firestore.collection('todoList').where(\"uid\",\"==\",userData.uid).get()\r\n            response.forEach(item => setList(item.data().listItems))\r\n        }\r\n    }\r\n\r\n    //Retreiving data from firestore\r\n    // const getItemsFromFirestore = async (userData) => {\r\n    //     if(userData){\r\n    //         let response = await firestore.collection('todoList').where(\"uid\",\"==\",userData.uid).get()\r\n    //         response.forEach(item => console.log(item.data().listItems))\r\n    //     }\r\n    // } Initially wrote this a separate function, but there is a discrepancy in data between adding and deleting\r\n    // Hence moved this function into a single function combined with adding.\r\n\r\n    \r\n    const handleRetrieve = async () => {\r\n        if(userData){\r\n            let reference = await firestore.collection('todoList').where(\"uid\",\"==\",userData.uid).get()\r\n            reference.forEach(item => {\r\n                if(item.data().listItems.length > 0){\r\n                    setList(item.data().listItems)\r\n                } else {\r\n                    // alert(\"Nothing to display, add something\")\r\n                    setEmpty('empty')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    //Deleting the items\r\n    const handleDelete = async (task) => {\r\n        if(userData){\r\n            await firestore.doc(`todoList/${userData.uid}`).update({\r\n                listItems : firebase.firestore.FieldValue.arrayRemove(task)\r\n            })\r\n            let response = await firestore.collection('todoList').where(\"uid\",\"==\",userData.uid).get()\r\n            response.forEach(item => setList(item.data().listItems))\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {userData ? \r\n            <div className=\"signed-in-data\">\r\n                <div className=\"button-group\">\r\n                    <button onClick={() => auth.signOut()} className=\"sign-out\">Sign out</button>\r\n                    {list.length===0 && <button onClick={handleRetrieve} className=\"retrieve\">Retrieve old Data</button>}\r\n                </div>\r\n                {empty && <Alert severity=\"warning\">Nothing to display, please add something</Alert>}\r\n                <h2>Welcome <span className=\"user-name\">{userData.displayName}</span></h2>\r\n                <input type=\"text\" placeholder=\"type here and click + \" onChange={handleChange} value={data} className=\"input-box\"/>\r\n                <AddCommentIcon onClick={handleClick} className=\"add\"/>\r\n                <div className=\"list-items\">\r\n                    {list.length>0 ?\r\n                        list.map((item,index) => <li key={index}>{item}<span className=\"delete\" onClick={() => handleDelete(item)}><DeleteForeverIcon /></span></li>)\r\n                    \r\n                    :\r\n                    <h3>Add some task</h3>}\r\n                </div>\r\n            </div>        \r\n            :   <div>\r\n                <h2>Sign in and proceed</h2>\r\n                <button onClick={googlSignIn} className=\"sign-in\">Google SignIn</button>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport TodoList from \"./Components/TodoList/TodoList\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"banner\">Personalem List</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}